"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–æ–≤
—Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
"""

import os
import logging
import sys
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
from typing import Optional, Dict, Any
from config import settings


class EmojiFormatter(logging.Formatter):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫ —É—Ä–æ–≤–Ω—è–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —ç–º–æ–¥–∑–∏
    EMOJI_MAP = {
        'DEBUG': 'üêõ',
        'INFO': '‚ÑπÔ∏è ',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üî•'
    }
    
    def __init__(self, fmt=None, datefmt=None, style='%', use_emoji=True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
        
        Args:
            fmt: –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            datefmt: –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            style: –°—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            use_emoji: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        """
        super().__init__(fmt, datefmt, style)
        self.use_emoji = use_emoji
    
    def format(self, record):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        record_copy = logging.makeLogRecord(record.__dict__)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.use_emoji:
            emoji = self.EMOJI_MAP.get(record_copy.levelname, '')
            if emoji:
                record_copy.levelname = f"{emoji} {record_copy.levelname}"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        return super().format(record_copy)


def setup_logger(
    name: str,
    log_level: str = "INFO",
    log_file: Optional[str] = None,
    log_format: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    max_bytes: int = 10485760,  # 10 MB
    backup_count: int = 5,
    console: bool = True,
    propagate: bool = False,
    use_emoji: bool = True,
) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        log_format: –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∞
        max_bytes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –ø–µ—Ä–µ–¥ —Ä–æ—Ç–∞—Ü–∏–µ–π
        backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–∞
        console: –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        propagate: –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –ª–æ–≥–≥–µ—Ä–∞–º
        use_emoji: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –ª–æ–≥–∞—Ö

    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    level = getattr(logging, log_level.upper(), logging.INFO)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger(name)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if logger.handlers:
        logger.handlers.clear()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.setLevel(level)
    logger.propagate = propagate

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
    formatter = EmojiFormatter(log_format, use_emoji=use_emoji)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    if console:
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        console_handler.setLevel(level)
        logger.addHandler(console_handler)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if log_file:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        log_dir = os.path.dirname(log_file)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
        file_handler = RotatingFileHandler(
            log_file,
            maxBytes=max_bytes,
            backupCount=backup_count,
            encoding="utf-8"
        )
        file_handler.setFormatter(formatter)
        file_handler.setLevel(level)
        logger.addHandler(file_handler)

    return logger


def setup_daily_logger(
    name: str,
    log_level: str = "INFO",
    log_file: Optional[str] = None,
    log_format: str = "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    backup_count: int = 30,
    console: bool = True,
    propagate: bool = False,
    use_emoji: bool = True,
) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        log_format: –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∞
        backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–∞
        console: –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        propagate: –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –ª–æ–≥–≥–µ—Ä–∞–º
        use_emoji: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –ª–æ–≥–∞—Ö

    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    level = getattr(logging, log_level.upper(), logging.INFO)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
    logger = logging.getLogger(name)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if logger.handlers:
        logger.handlers.clear()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.setLevel(level)
    logger.propagate = propagate

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
    formatter = EmojiFormatter(log_format, use_emoji=use_emoji)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    if console:
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        console_handler.setLevel(level)
        logger.addHandler(console_handler)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if log_file:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        log_dir = os.path.dirname(log_file)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = TimedRotatingFileHandler(
            log_file,
            when="midnight",
            backupCount=backup_count,
            encoding="utf-8"
        )
        file_handler.setFormatter(formatter)
        file_handler.setLevel(level)
        file_handler.suffix = "%Y-%m-%d"
        logger.addHandler(file_handler)

    return logger


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤
_loggers: Dict[str, logging.Logger] = {}


def get_logger(name: str, **kwargs: Any) -> logging.Logger:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏. –ï—Å–ª–∏ –ª–æ–≥–≥–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π.

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è setup_logger

    Returns:
        logging.Logger: –õ–æ–≥–≥–µ—Ä
    """
    if name not in _loggers:
        _loggers[name] = setup_logger(name, **kwargs)
    return _loggers[name]


def get_configured_logger(name: str, log_file_name: Optional[str] = None) -> logging.Logger:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config.py.
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        log_file_name: –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "belpost.log"). 
                      –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
    
    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    log_config = settings.logging
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
    log_file = None
    if log_file_name:
        log_dir = os.path.dirname(log_config.log_file)
        if log_dir:
            log_file = os.path.join(log_dir, log_file_name)
    
    return setup_logger(
        name=name,
        log_level=log_config.log_level,
        log_file=log_file,
        log_format=log_config.log_format,
        max_bytes=log_config.max_bytes,
        backup_count=log_config.backup_count,
        console=log_config.console,
        use_emoji=log_config.use_emoji
    )


# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def create_app_loggers() -> Dict[str, logging.Logger]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config.py

    Returns:
        Dict[str, logging.Logger]: –°–ª–æ–≤–∞—Ä—å —Å –ª–æ–≥–≥–µ—Ä–∞–º–∏
    """
    log_config = settings.logging
    app_config = settings
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
    log_dir = os.path.dirname(log_config.log_file)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir, exist_ok=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    loggers = {
        "app": setup_logger(
            f"{app_config.app_name}.app",
            log_level=log_config.log_level,
            log_file=os.path.join(log_dir, "app.log") if log_dir else None,
            log_format=log_config.log_format,
            max_bytes=log_config.max_bytes,
            backup_count=log_config.backup_count,
            console=log_config.console,
            use_emoji=log_config.use_emoji,
        ),
        "parser": setup_logger(
            f"{app_config.app_name}.parser",
            log_level=log_config.log_level,
            log_file=os.path.join(log_dir, "parser.log") if log_dir else None,
            log_format=log_config.log_format,
            max_bytes=log_config.max_bytes,
            backup_count=log_config.backup_count,
            console=log_config.console,
            use_emoji=log_config.use_emoji,
        ),
        "belpost": setup_logger(
            f"{app_config.app_name}.belpost",
            log_level=log_config.log_level,
            log_file=os.path.join(log_dir, "belpost.log") if log_dir else None,
            log_format=log_config.log_format,
            max_bytes=log_config.max_bytes,
            backup_count=log_config.backup_count,
            console=log_config.console,
            use_emoji=log_config.use_emoji,
        ),
        "webdriver": setup_logger(
            f"{app_config.app_name}.webdriver",
            log_level=log_config.log_level,
            log_file=os.path.join(log_dir, "webdriver.log") if log_dir else None,
            log_format=log_config.log_format,
            max_bytes=log_config.max_bytes,
            backup_count=log_config.backup_count,
            console=log_config.console,
            use_emoji=log_config.use_emoji,
        ),
        "ui": setup_logger(
            f"{app_config.app_name}.ui",
            log_level=log_config.log_level,
            log_file=os.path.join(log_dir, "ui.log") if log_dir else None,
            log_format=log_config.log_format,
            max_bytes=log_config.max_bytes,
            backup_count=log_config.backup_count,
            console=log_config.console,
            use_emoji=log_config.use_emoji,
        ),
    }

    return loggers


# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def create_main_app_logger() -> logging.Logger:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config.py
    
    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    log_config = settings.logging
    
    return setup_logger(
        name="addr_corr",
        log_level=log_config.log_level,
        log_file=log_config.log_file,
        log_format=log_config.log_format,
        max_bytes=log_config.max_bytes,
        backup_count=log_config.backup_count,
        console=log_config.console,
        use_emoji=log_config.use_emoji
    )


# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app_logger = create_main_app_logger()
